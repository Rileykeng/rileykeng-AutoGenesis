// sayoさんの3Dshapeのやつ
// https://openprocessing.org/sketch/1412630
// を、タッチ対応させる
// さらにp5.js/1.6.0にも適用させる
// forkという形で。やりましょう～～

// touchなら複数作れますからね。

// TODO
// 1._triangulateを1.6.0でも使えるように仕様変更
// 2.IAを導入してマウス操作だけIAに合わせる（リスナー追加）
// 3.さらにタッチに関してもリスナーを追加
// 4.複数タッチに対応させるための大規模な仕様変更
// いや、マウスの時点で線の描画も含めてクラスでまとめておく必要があるわね
// たとえば2つのタッチをして片方はわっかを作らないがもう片方は作る、
// そういうのを処理できるようにしないといけないのだ。

// しかしそこで問題が生じるのよね...
// pointerを拡張すればいい
// prototypeなのでね
// これをextendsして新しく作る...
// touchが終わる際、もしくはmouseUpの際に何らかの処理を行えるように
// する必要があるわけです
// そうなるとプロトタイプの方も空の関数を用意しておく必要があるわね...大変だ。
// orbitControlに関しては特にやる必要ないけど
// こういった応用の場合にはそれが無いとだめよね。んー。


// まあこれカリング対応してないからあんま好きくないけどね...
// 今はいいです。とりあえず今は気にしないで行きましょう。うーん...

// 手始めに
// 土台の方をwebglにしましょう。うざいから。

// できました～～
// 楽勝ね。
// あのさぁ...
// まあいいか
// いやObjectPoolじゃないけどその
// 消し方が雑...

// 次に生成をオブジェクトごとに実行できるようにする...
// というかID管理をやめる。
// model使えばいいのでid要らないです。
// んでexistやめて単純に排除すればいいです。それでいいんです。この程度なら。
// それしないと複数タッチにするの無理なので。
// PointerPrototypeの継承を用意して
// それがgeometryを作る
// それをmodelで描画すればいいだけの話

// mouseReleasedの描画要らんやん
// 消したわ（？？？って感じ）
// infoは描画中のagentそれぞれに対して描画するわけですね

// 色ですが
// closeの時に決定してその色で着色した方が自然だと思う
// 赤で固定するよりは
// しかしshapeクラスを作らないと無理ですね
// pointerとcompositeにするか応相談ですね
// compositeの方がすっきりすると思うよ～
// まあ不備が多いです
// 大昔のコードだしな
// 描いた場所にそのまま生成されるためにはfindCenterでないとまずいわね。
// normalizeは無しで。んー。仕方ない。

// ベクトルの配列はPointerが持つ。んでShapeを生成して配列にぶち込む。
// ぶち込んだらベクトルの配列は破棄。生成に失敗しても破棄。んー...

// modelだめですね。共有されちゃってる。
// 仕方ないな～
// 個別にid用意するか
// rendererで初期化しよう。これで問題ない。geomを保持する必要もないわね。
// generate用にクラスを用意すればグローバルを減らせるわね
// やろうやろう

// TODO
// generate用のでかいクラス用意して
// geomIdとshapesはそこが管理する
// IAを導入する
// マウスダウンで
// ポインタが生成されて
// 描画を実行する
// addVertexはマウスが動いたときに実行されるように仕様変更する
// タッチはまた別にイベントを用意する
// これでタッチで複数...ができる可能性が出てくる

// bgとinfoもsystemが管理するので
// 最終的にglobalは_systemオンリーになる。ですね。

// systemの前にIA導入して
// タッチで動くようにする
// マルチパスは諦める
// 持ち味を生かすためにシングルパスオンリーにする
// その代わり複数同時に作れるようにしよう。

// スタイラスでカクカクなるのはデフォルト挙動のせいですね

// 2023-04-12
// わぁ...？？？？
// タッチの方も！用意して！！
// 壁を越えたね。おめでとう🎉

// IAやばい。やばすぎ...

// やばすぎだけど知ってる
// これ流しても爆死するだけだって。
// だから
// しない。

// いくつか
// まず関係ないですが
// OCはexIAを引数に放り込んだうえで
// あとレンダラーも必要ですね射影行列使うので
// それでですね
// Interactionの継承で書きましょうか
// 加えて
// こっちもメッシュ生成のところを
// レンダラーとグラフィックからInteractionの継承で書こうかなと
// あと
// 背景とインフォメーションはそれとは別に用意しますかね
// 背景はシェーダーで描いた方が楽かと思うのでそれで。いこうかなと。
// キャンバスサイズとか使って適当に。pixelDensity(1)なので
// gl_FragCoord使った方がいいかもしれない。uvだと大きさがね...いや？
// 比率でもいいか。縦と横の。512だから、それで割って、たとえば2.3倍だったら
// uv.xを2.3倍してfractして...いけるね。OK.

// 2023-05-02
// ambientMode.jsを導入しました。
// ライティングで苦しんでたでしょう。
// OVERLAYが救世主になってくれました。いぇーい。
// 見た目が劇的に改善されました。やば...やばすぎ...
// easyImage.jsを導入しました。
// ADD固定なのです。
// そのうちきちんとしたものを用意するので...いまはこれで...

// OVERLAYやば...やばすぎ...
// OVERLAYありがとう...ありがとう...

// やっぱスマホだと30～40fpsだわね
// 時間制御だからカクカクは無いんだけど。
// まあ、いいか...
